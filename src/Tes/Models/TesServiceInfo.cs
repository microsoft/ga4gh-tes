// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/*
 * Task Execution Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Tes.Converters;
using Tes.Utilities;

namespace Tes.Models
{
    /// <summary>
    /// ServiceInfo describes information about the service, such as storage details, resource availability, and other documentation.
    /// </summary>
    [DataContract]
    public partial class TesServiceInfo : IEquatable<TesServiceInfo>
    {
        public TesServiceInfo()
        { }

        static TesServiceInfo()
            => NewtonsoftJsonSafeInit.SetDefaultSettings();

        /// <summary>
        /// Returns the id of the service, e.g. \&quot;ohsu-compbio-funnel\&quot;.
        /// </summary>
        /// <value>Returns the id of the service, e.g. \&quot;ohsu-compbio-funnel\&quot;.</value>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Returns the name of the service, e.g. \&quot;ohsu-compbio-funnel\&quot;.
        /// </summary>
        /// <value>Returns the name of the service, e.g. \&quot;ohsu-compbio-funnel\&quot;.</value>
        [DataMember(Name = "name")]
        public string Name { get; set; } = "GA4GH Task Execution Service";

        /// <summary>
        /// Returns the type of a GA4GH service.
        /// </summary>
        /// <value>Returns the type of the service.</value>
        [DataMember(Name = "type")]
        public TesServiceType Type { get; set; } = new()
        {
            Group = "org.ga4gh",
            Artifact = "tes",
            Version = "1.1.0"
        };

        /// <summary>
        /// Description of the service. Should be human readable and provide information about the service.
        /// </summary>
        /// <value>Description of the service. Should be human readable and provide information about the service.</value>
        [DataMember(Name = "description")]
        public string Description { get; set; } = "GA4GH TES on Azure";

        /// <summary>
        /// Returns the organization providing the service.
        /// </summary>
        /// <value>Returns the organization providing the service.</value>
        [DataMember(Name = "organization")]
        public TesOrganization Organization { get; set; }

        /// <summary>
        /// Returns  contact url.
        /// </summary>
        /// <value>Returns  contact url.</value>
        [DataMember(Name = "contactUrl")]
        public string ContactUrl { get; set; }

        /// <summary>
        /// Returns a documentation url, e.g. \&quot;https://docs.myservice.example.com\&quot;.
        /// </summary>
        /// <value>Returns a documentation url, e.g. \&quot;https://docs.myservice.example.com\&quot;.</value>
        [DataMember(Name = "documentationUrl")]
        public string DocumentationUrl { get; set; } = "https://github.com/microsoft/ga4gh-tes/wiki";

        /// <summary>
        /// Timestamp describing when the service was first deployed and available, in RFC 3339 format. This is set by the system, not the client.
        /// </summary>
        /// <value>Timestamp describing when the service was first deployed and available, in RFC 3339 format. This is set by the system, not the client.</value>
        [JsonConverter(typeof(JsonValueConverterDateTimeOffsetRFC3339))]
        [DataMember(Name = "createdAt")]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Timestamp describing when the service was last updated, in RFC 3339 format. This is set by the system, not the client.
        /// </summary>
        /// <value>Timestamp describing when the service was last updated, in RFC 3339 format. This is set by the system, not the client.</value>
        [JsonConverter(typeof(JsonValueConverterDateTimeOffsetRFC3339))]
        [DataMember(Name = "updatedAt")]
        public DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.
        /// </summary>
        /// <value>Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.</value>
        [DataMember(Name = "environment")]
        public string Environment { get; set; }

        /// <summary>
        /// Returns the version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.
        /// </summary>
        /// <value>Returns the version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.</value>
        [DataMember(Name = "version")]
        public string Version { get; set; } = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version;

        /// <summary>
        /// Lists some, but not necessarily all, storage locations supported by the service.  Must be in a valid URL format. e.g.  file:///path/to/local/funnel-storage s3://ohsu-compbio-funnel/storage etc.
        /// </summary>
        /// <value>Lists some, but not necessarily all, storage locations supported by the service.  Must be in a valid URL format. e.g.  file:///path/to/local/funnel-storage s3://ohsu-compbio-funnel/storage etc.</value>
        [DataMember(Name = "storage")]
        public List<string> Storage { get; set; }

        /// <summary>
        /// List keys supported in TesResources.backend_parameters
        /// </summary>
        [DataMember(Name = "tesResources_backend_parameters")]
        public List<string> TesResourcesSupportedBackendParameters { get; set; } = Enum.GetNames(typeof(TesResources.SupportedBackendParameters)).ToList();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
            => new StringBuilder()
                .Append("class TesServiceInfo {\n")
                .Append("  Id: ").Append(Id).Append('\n')
                .Append("  Name: ").Append(Name).Append('\n')
                .Append("  Type: ").Append(Type).Append('\n')
                .Append("  Description: ").Append(Description).Append('\n')
                .Append("  Organization: ").Append(Organization).Append('\n')
                .Append("  ContactUrl: ").Append(ContactUrl).Append('\n')
                .Append("  DocumentationUrl: ").Append(DocumentationUrl).Append('\n')
                .Append("  CreatedAt: ").Append(CreatedAt).Append('\n')
                .Append("  UpdatedAt: ").Append(UpdatedAt).Append('\n')
                .Append("  Environment: ").Append(Environment).Append('\n')
                .Append("  Version: ").Append(Version).Append('\n')
                .Append("  Storage: ")
                .Append(
                    Storage?.Count > 0 ?
                    string.Join(",", Storage) : null ?? string.Empty)
                .Append('\n')
                .Append("  TesResourcesSupportedBackendParameters: ")
                .Append(
                    TesResourcesSupportedBackendParameters?.Count > 0 ?
                    string.Join(",", Enum.GetNames(typeof(TesResources.SupportedBackendParameters))) : null ?? string.Empty)
                .Append('\n')
                .Append("}\n")
                .ToString();

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
            => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
            => obj switch
            {
                var x when x is null => false,
                var x when ReferenceEquals(this, x) => true,
                _ => obj.GetType() == GetType() && Equals((TesServiceInfo)obj),
            };

        /// <summary>
        /// Returns true if TesServiceInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TesServiceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TesServiceInfo other)
            => other switch
            {
                var x when x is null => false,
                var x when ReferenceEquals(this, x) => true,
                _ =>
                (
                    Id == other.Id ||
                    Id is not null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name is not null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Type == other.Type ||
                    Type is not null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Description == other.Description ||
                    Description is not null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    Organization == other.Organization ||
                    Organization is not null &&
                    Organization.Equals(other.Organization)
                ) &&
                (
                    ContactUrl == other.ContactUrl ||
                    ContactUrl is not null &&
                    ContactUrl.Equals(other.ContactUrl)
                ) &&
                (
                    DocumentationUrl == other.DocumentationUrl ||
                    DocumentationUrl is not null &&
                    DocumentationUrl.Equals(other.DocumentationUrl)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt is not null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt is not null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) &&
                (
                    Environment == other.Environment ||
                    Environment is not null &&
                    Environment.Equals(other.Environment)
                ) &&
                (
                    Version == other.Version ||
                    Version is not null &&
                    Version.Equals(other.Version)
                ) &&
                (
                    Storage == other.Storage ||
                    Storage is not null &&
                    Storage.SequenceEqual(other.Storage)
                ) &&
                (
                    TesResourcesSupportedBackendParameters == other.TesResourcesSupportedBackendParameters ||
                    TesResourcesSupportedBackendParameters is not null &&
                    TesResourcesSupportedBackendParameters.SequenceEqual(other.TesResourcesSupportedBackendParameters)
                )
            };

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id is not null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (Name is not null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (Type is not null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }

                if (Description is not null)
                {
                    hashCode = hashCode * 59 + Description.GetHashCode();
                }

                if (Organization is not null)
                {
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                }

                if (ContactUrl is not null)
                {
                    hashCode = hashCode * 59 + ContactUrl.GetHashCode();
                }

                if (DocumentationUrl is not null)
                {
                    hashCode = hashCode * 59 + DocumentationUrl.GetHashCode();
                }

                if (CreatedAt is not null)
                {
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                }

                if (UpdatedAt is not null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                if (Environment is not null)
                {
                    hashCode = hashCode * 59 + Environment.GetHashCode();
                }

                if (Version is not null)
                {
                    hashCode = hashCode * 59 + Version.GetHashCode();
                }

                if (Storage is not null)
                {
                    hashCode = hashCode * 59 + Storage.GetHashCode();
                }

                if (TesResourcesSupportedBackendParameters is not null)
                {
                    hashCode = hashCode * 59 + TesResourcesSupportedBackendParameters.GetHashCode();
                }

                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TesServiceInfo left, TesServiceInfo right)
            => Equals(left, right);

        public static bool operator !=(TesServiceInfo left, TesServiceInfo right)
            => !Equals(left, right);

#pragma warning restore 1591
        #endregion Operators
    }
}

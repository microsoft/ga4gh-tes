apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: tes
  name: tes
spec:
  ports:
    - name: {{ .Values.service.tesPort | quote }}
      port: {{ .Values.service.tesPort }}
      targetPort: {{ .Values.service.tesPort }}
  selector:
    io.kompose.service: tes
status:
  loadBalancer: {}
{{- if eq .Values.service.enableIngress "True" }}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: {{ .Values.config.letsEncryptEmail }}
    privateKeySecretRef:
      name: letsencrypt
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: tes-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/auth-type: basic 
    nginx.ingress.kubernetes.io/auth-secret: tes-basic-auth 
    nginx.ingress.kubernetes.io/auth-realm: "Authentication required"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ .Values.service.tesHostname }}
    secretName: tls-secret
  rules:
    - host: {{ .Values.service.tesHostname }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: tes
                port:
                  number: {{ .Values.service.tesPort }}
{{- end}}
